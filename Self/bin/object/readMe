객체
상태값과 동작을 가지고 있음.
(데이터를 저장할 수 있고, 메서드를 가지고 있음)
객체를 만들어내기 위해서는 클래스가 필요함.
new 생성자 로 객체를 만듬

	클래스
	객체를 만들어내는 도면.
	클래스의 구성은 객체가 상태값을 통해 동작할 수 있도록 구성되어 있다.
	상태값을 가질 수 있는 변수를 가지고 있다 (멤버 변수, 필드)
	동작을 하기위해 메서드를 가지고있다 (멤버 메서드, 멤버 함수)

			예제
			색(문자열), 현재 속도(정수), 주행 거리(정수)의 상태값을 가지고
			출발, 정지, 상태 출력이 가능한 객체 만들기.

		클래스 구성요소
		멤버 변수
		멤버 메서드
		생성자 :객체 생성의 역할을 담당하면서, 멤버 변수의 초기화를 담당한다. 일종의 메서드(단, 반환형이 없고 이름이 클래스의 이름과 동일해야 한다.)
			개발자가 클래스를 선언하고, 생성자를 작성하지 않으면 기본 생성자는 컴파일러가 만들어준다.
			
			생성자의 모양
			[수식자] 클래스의 이름([매개변수]) {
			}
			
			기본 생성자(Default Constructor) : 매개변수가 없는 생성자
			수식자는 보통의 경우 public
			ex) Multiplier 클래스의 기본 생성자
				public Multiplier() {
			}
			
			기본 생성자가 아닌 생성자
			객체를 만들 때 외부로부터 값을 받아와서 멤버변수를 초기화해야 할때 사용
			public Multiplier(int number){
			}
			
			메서드 오버로딩(Overloading) != 메서드 오버라이딩(Overriding)
			오버로딩 : 이름이 같은 메서드를 여러개 선언
     		단, 매개변수가 달라야함(매개변수의 자료형 or 순서 or 개수가 달라야 한다. 매개변수 이름이 다른건 무효) 
     		ex) m.multiplyInt(1, 2);
     			m.multiplyDouble(1.2, 3.3);
     			정수 실수 둘다 같은 이름의 메서드를 사용하고 싶을 때.
			
			
		메서드 호출 시 값을 넘겨주는 방법 (변수의 타입에 따른 데이터 전달의 차이점)
		값에 의한 전달(call by Value)	 : 기초 자료형
			값 자체가 복사되어 전달되기 때문에 전달받은 쪽에서 전달한 쪽에 영향을 주지 못한다 
		참조에 의한 전달(call by reference) : 참조 자료형
			전달하고자 하는 객체의 주소를 전달하기 때문에 전달받은 쪽에서 전달한 쪽에 영향을 줄 수 있다
			(전달 받은 쪽에서 객체의 데이터를 조작하면 원래 객체의 데이터 값도 바뀜)