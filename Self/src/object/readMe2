객체지향의 특징
캡슐화 : 객체의 내부 정보를 보호 && 기능과 상태를 하나로 묶어주는 개념 
//변수나 메서드에 접근 제한
>>getter(접근자) setter(설정자)가 필요 // 변수 접근을 제한 
getter/setter를 사용하는 이유
1. 외부에서 변수에 함부로 접근해서 변경하는 것을 막기 위함
2. 세분화된 접근제어 가능 : (읽기전용/쓰기전용/읽기쓰기 허용/모두 금지)
3. 입력값에 대한 검증이 가능 (ex) maxSpeed, minSpeed)

추상화 : 공통되는 개념을 뽑아내서 기능이나 내용의 상세한 부분은 작성하지 않고
	    정의만 내려서 기능과 내용을 확장가능하게 하는 개념
		
상속 : 공통 기능을 가지지만 다른 추가적인 작업이 필요할때 상속을 받는다
	부모의 기능을 그대로 사용하면서 기능을 추가해서 코드의 재사용성을 높일 수 있다.
(다형성을 만들 수 있게 하는게 상속)

다형성 : 하나의 이름으로 다양한 작업을 할 수 있게 만드는 개념
		공무원
소방관 	경찰관	 중대장
불을 끈다	도둑잡기	 중대장은 너희에게 실망했다.
공무원은 일을 합니다: 하나의 작업으로 3가지 일을 시킬 수 있음.

private : 클래스 외부(다른 클래스)에서 변수에 접근하지 못하도록 변수에 접근 제한 설정
public : 클래스 외부에서도 변수에 접근할 수 있도록 접근 제한 설정

getter 메서드, 반환형 얻고자 하는 변수와 같은 타입
get 필드명() : 해당 필드를 반환
ex) color의 getter : getColor()

setter 메서드, 반환형 void
set 필드명(값) : 해당 필드에 값을 저장
ex) color의 setter : setColor(String c)

this : 클래스 내부에서 객체를 지칭하는 키워드

Point 객체를 멤버변수로 가지는 클래스 만들어 보기
Circle
중심점(Point) center, 반지름의 상태값을 가짐 radius
getter, setter, toString() 만들자
생성자 (기본생성자, 반지름과 중심점을 매개변수로 받는 생성자)
메서드
넓이를 반환하는 메서드(3.14*radius*radius),
둘레를 반환하는 메서드(2*3.14*radius)