Exception (예외발생)
컴퓨터가 연산하지 못하는 작업을 요청했을 때,
어떤 작업을 할지 모르기 때문에 프로그램의 진행이 멈춰버림.

예외가 발생하면 어떻게 작업을 할지 알려주면 해결.

예외 처리 문장 : try-catch
try{
	//예외 발생이 예상되는 문장
}catch(예외){
	//예외가 발생했을 때 실행할 문장
	()안에 적어둔 예외가 발생했을때만 처리된다. 예)ArithmeticException
	다른 예외가 발생했을 경우 처리되지 않음.
}
Exception로 입력하면 모든 예외에 적용된다.
하지만 이렇게 해버리면 어떤 예외가 발생했는지 상대방에게 정확히 알려줄 수가 없음.

예외 처리 책임 전가 시키기 : throws 예외
public void method() throws 예외클래스 {
	//예외가 발생해도 메서드 내에서 강제로 처리하지 않아도 되게 만들어줌.
}

//강제로 예외를 처리하는 예제를 만들어봅시다.
//런타임 예외를 제외한 예외를 발생시키면, 해당 예외를 처리해야한다. 
//예외 생성 : throw

finally:

	try{
		//예외 발생 예상 코드
	}catch(){
		//예외 발생시 실행할 코드
	}finally{
		//예외가 발생하든 안하든 마지막에 실행되는 코드
	}
	
사용자 정의 예외
기존의 예외로는 처리할 수 없는 예외를 처리하고자 할 때 직접 예외를 생성한다
입금이나 점수 입력시 음수가 안들어가야 하는 경우 처럼
코드로써 예외를 처리하지않고 특정 상황에 예외가 필요할때 사용한다.

Exception 클래스를 상속받아서 새로운 예외 클래스를 작성한다.

OddNumberException
(홀수일때 발생시키는 예외)

Score 클래스 작성
총점(total)을 저장하고,
설정(setTotal(int): void)하고, 
출력(showTotal() : void)할 수 있는 클래스
setTotal()할 때 홀수가 입력되면 OddNumberException 발생

ScoreTest 만들고
main에서 값 넣어보기




