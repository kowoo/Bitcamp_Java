Abstract (추상화)
특징: 상세기능을 정의하지 않고 이름만 정의한다

추상메서드: 바디가 없는 메서드, 미완성의 메서드
(abstract method)

추상메서드를 하나라도 포함하고 있는 클래스는 추상클래스여야 한다.
예)
public class ABC		---------->		public abstract class ABC

public void draw() {    ---------->		public abstract void draw();
}

추상클래스는 객체를 만들 수 없다.
그러므로 상속을 사용하기 위해서 쓰인다.
결론적으로 추상클래스의 객체를 생성하기 위해서는
상속을 통해서 추상메서드를 구현해야한다.

추상클래스를 상속받은 클래스의 특징
부모클래스가 가지는 추상메서드를 구현하거나 (이러면 객체 생성 가능)
자기 자신도 추상 클래스가 되어야 한다. (이러면 객체 생성 불가. 구현을 해야 객체 생성가능)

Interface (결합부)
다중상속에 적합하다 (자바는 직접적인 다중상속을 지원하지 않기 때문에 이 방법을 쓴다)
추상 메서드로만 이루어져있다. (다른 메서드 사용불가!)
인터페이스 내부에서는 abstract 키워드 생략 가능
 당연히 객체 생성도 안됨, 타입으로는 사용 가능
implements를 통해서 구현가능
 
 			//Drawable을 구현하는 Rectangle,Triangle,Circle 작성하기
			//DrawableTest에서는 Rectangle,Triangle,Circle객체 만들어서
			//Drawable 배열 에 각각 참조 시키고, 반복문에서 draw() 실행하기  

Car 클래스는 Tire(interface)의 roll()을 이용해서 굴러감
Car Tire 클래스의 객체를 가지고 사용(멤버변수)
Tire를 구현하는 클래스는 두 가지 방법으로 만들어본다.
 1.implements 해서 class로 작성
 2. 익명클래스로 작성

1.Tire 인터페이스 부터 작성: 
2.Tire 인터페이스를 구현하는 KoreaTire 작성
3.CarTest 작성: Car 객체, Tire 객체 만들어서 drive() 호출
 
람다식:	인터페이스의 메서드가 하나일 때만 사용가능한 표현식
		인터페이스구현 클래스를 좀 더 쉽게 작성할 수 있도록 만들어주는 표현식
()->{};
반환형 메서드이름() {
	반환값

 