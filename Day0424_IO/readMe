입출력, IO(Input, Ouput)
내 프로그램이 외부와 데이터를 주고 받는 것

데이터를 입출력 할 때는 '스트림(Stream)'을 이용한다.

Stream: 순서가 있는 데이터의 연속적인 흐름, 단방향이다(원래 뜻이 개천이니까 양방향이 아닌건 당연!)
데이터를 입력 받을 때는 input Stream을 이용
데이터를 내보낼 때는 Output Stream을 이용

데이터의 소스: 입력과 출력의 목적지
Stream 종류1: 목적에 의한 분류
		1. 소스에 직접 데이터를 쓰거나 읽어오는 Stream: 데이터 싱크 Stream
		2. 들어온 Stream을 읽거나 쓰기 편하게 바꿔주는 Stream: 데이터 처리 Stream
	
Stream의 종류2: 처리 단위에 의한 분류
		1. 바이트 Stream: 바이트 단위로 데이터를 처리
		2. 문자 Stream:  문자 단위로 데이터를 처리
		
*스트림을 불렀으면 닫아주자!
안닫아줘도 괜찮지만 닫아주면 프로그램 효율이 올라감~

--------------------------------------------------------------------
학생 한명의 정보를 이름/학년/점수 형태로 파일에 저장하고 (파일 이름은 자유)
파일에서 정보 읽어와서 학생객체에 넣고 출력하기,
이후 학생 정보 변경하고 파일에 다시 쓰기

StudentManagement 파일 입출력으로 데이터 저장하기
1. 유지시켜야하는 데이터는 StudentList(혹은 배열, MyList, 학생 정보가 여러개 저장되는 객체)
2. List를 객체의 변화가 있을 때나, 종료할 때 파일에 저장하고
3. 다시 실행할 때 파일에 저장되어 있는 List 객체를 불러온다. (이전 데이터 유지)
4. 잘라낸 문자열 잘 정리해서 학생객체에 넣기
5. 학생객체 내용 출력하기
6. 학생객체 내용 바꿔서 문자열로 만들어내기
7. 문자열 파일에 쓰기
--------------------------------------------------------------------

Serialize(직렬화): 객체를 전송가능한 형태로 변경하는 것
전송하고자 하는 객체의 클래스에 직렬화를 구현
implements Serializable: 데이터 직렬화
변수에 transient를 선언하면 해당 변수는 직렬화 대상에서 제외된다.
>>객체를 저장했다가 다시 객체를 불러오면 해당 객체는 기본값이 들어가 있음(0, null같은 것들)


