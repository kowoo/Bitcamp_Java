TCP통신
TCP통신을 위해서는 연결을 미리 만들어 놓고 시작한다. 
Socket을 통해서 데이터를 주고 받음
데이터를 주고 받는 장치를 연결해주는 Socket을 만들어 놓고 시작한다.

데이터를 보내는 쪽과 받는 쪽의 역할이 다름
처음에 데이터를 보내기 위해서 연결 요청이 필요

echo Server: 내가 보낸 메시지를 그대로 다시 전달하는 서버
TcpClient2 , TcpServer2 클래스 작성하기
TcpClient2: 연결 맺고 나서 하는 일은 메시지 보내고 나서 받기 반복
TcpServer2 : 연결 맺고나서 메시지 받고 나서 보내기 반복


-------------------------------------------------------
TCP 1:1 채팅 만들기
hint 
1. TCP는 연결 요청하는 쪽(Client1)과 연결 받는 쪽(Client2)이 따로 존재해야 한다
2. 보내고 받기 위해서(sender Thread, receiver thread)둘다 같은 socket을 이용한다 
3. 보내는 기능과 받기 기능은 동시에 실행되어야 한다. (Thread)  
4. 보내고 받는 기능과 소켓 생성 기능을 분리하면 편하다....  

TcpClient1(소켓 연결 요청하는 채팅 클라이언트)
TcpClient2(소켓 연결 요청 수락하는 채팅 클라이언트)
Sender
Receiver

1. 아까전에 만든 Sender, Receiver, TcpClient1을 그대로 활용
2. 서버는  메시지를 받아서 상대방에게 주는 동작을 동시에 진행 해야 한다. 
   서버는 각 소켓으로부터 메시지를 받아서 처리하는 기능이 병렬적으로 수행되어야 한다.
 
총 쓰레드는 6개: 클라이언트 2개씩, 서버 2개

순서대로 진행
1. 서버 실행
2. 2개의 클라이언트로부터 요청을 기다림
3. 2개의 요청이 모두 들어오면 각 클라이언트에게 받은 메시지를 받아서 다른 클라이언트에게 전달한다.

서버
1. 1:1 채팅을 하기 위해서 각각의 클라이언트들과 연결이 되어야 함.
2. 2개의 클라이언트와 통신하기 위해 소켓이 2개 필요함.
3. 마찬가지 이유로 2번의 연결수락이 필요하다.
4. 클라이언트로부터 메시지를 받아서 다른 클라이언트에 전달하는 기능이 필요
	(각각의 클라이언트에 하나씩 있어야하며, 이 기능이 동시에 진행되어야함. 쓰레드?)

---------------------------------------------------------

일대다 채팅
1. 서버의 기능을 확장시킨다.
지금의 1:1서버는 소켓을 2개 저장할 수 있고, 요청을 2번만 받는다.
>> 제한없이 저장, 제한없이 요청받게 만든다.

서버
1. 소켓을 여러개 저장해야함. (예를 들어 List)
2. 소켓연결이 들어오면 List에 담아주고, 각 소켓 별로 서버동작의 기능을 가진 Thread 실행

서버동작
1. 소켓으로부터 메시지를 받아와서 List에 있는 모든 소켓에 메시지 전달
2. 본인은 제외

쓰레드 실행, List를 가지고있는 클래스를 따로 작성

서버가 할 일
연결 요청을 받으면 소켓을 ServerManager로 넘겨준다

ServerManager가 할 일
전달받은 소켓을 저장, 서버가 할 일을 쓰레드로 실행
